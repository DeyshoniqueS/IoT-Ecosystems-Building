//includes library for LCD 
#include <LiquidCrystal.h>   //ensure LiquidCrystal library is included
int tempPin = 0;
LiquidCrystal lcd(7, 8, 9, 10, 11, 12);
 
//include library for DHT sensor
#include <DHT_Async.h>
#define DHT_SENSOR_TYPE DHT_TYPE_11
 
//assign DHT sensor to pins
static const int DHT_SENSOR_PIN = 2;
DHT_Async dht_sensor( DHT_SENSOR_PIN, DHT_SENSOR_TYPE );
 
//assign fan as boolean
boolean fan_on = false;


//define pins for fan 
#define ENABLE 5
#define DIRA 3
#define DIRB 4
 
// will run only once
void setup() { 
  lcd.begin(16, 2);
  
  pinMode(ENABLE,OUTPUT);
  pinMode(DIRA,OUTPUT);
  pinMode(DIRB,OUTPUT);
 
  digitalWrite(DIRA,HIGH); //one way
  digitalWrite(DIRB,LOW);
  digitalWrite(ENABLE,LOW); // enable off
}
 
/*
* Poll for a measurement, keeping the state machine alive.  Returns
* true if a measurement is available.
*/
static bool measure_environment( float *temperature, float *humidity )
{
  static unsigned long measurement_timestamp = millis( );
 
  /* Measure once every four seconds. */
  if( millis( ) - measurement_timestamp > 3000ul )
  {
    if( dht_sensor.measure( temperature, humidity ) == true )
    {
      measurement_timestamp = millis( );
      return( true );
    }
  }
 
  return( false );
}
 
// code in void loop will control the rate of the fan as it adjusts to humidity and temperature
void loop() {
  float temperature;
  float humidity;
 
  if( measure_environment( &temperature, &humidity ) == true )
  {
    if (temperature > 29.0) {
      digitalWrite(ENABLE,HIGH);
      if(! fan_on) {
        lcd.println("High temperature - turn on fan");
        fan_on = true;
      }
    } else {
      digitalWrite(ENABLE,LOW);
      if(fan_on) {
        lcd.println("Low temperature - turn off fan");
        fan_on = false;
      }
    }
    lcd.print( "T = " );
    lcd.print( temperature, 1 );
    lcd.print( " deg. C, H = " );
    lcd.print( humidity, 1 );
    lcd.println( "%" );
 
  }
}




